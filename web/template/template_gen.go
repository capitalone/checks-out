// Code generated by go-bindata.
// sources:
// files/brand.html
// files/error.html
// files/index.html
// files/logout.html
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesBrandHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xe9\x72\xdc\xb8\x11\xfe\xef\xa7\xe8\x70\x37\x6b\x4d\x45\x24\x67\x24\xdb\x71\xd9\x33\xcc\xfa\x4a\x56\x49\x7c\x94\xed\xad\xad\xfc\xc4\x10\x3d\x24\x24\x10\xa0\x81\xe6\x8c\xb8\x2e\x55\xe5\x21\xf2\x84\x79\x92\x14\x78\xcd\xc5\x39\xa4\xb5\x2b\xc9\xd6\xfa\x87\x38\x04\xfa\x46\x77\xe3\x03\xe8\xf1\xef\x5e\xbe\x7d\xf1\xf1\x1f\xef\x5e\x41\x4a\x99\x8c\xee\x8d\xdd\x03\x54\xe2\xb3\x3c\x9f\x78\x2c\xcf\x3d\x90\x4c\x25\x13\x0f\x95\x17\xdd\x03\x00\x18\xa7\xc8\x78\xfd\xb3\x7a\x25\x41\x12\xa3\x17\x29\xc6\x57\xd6\x7f\x5b\xd0\x38\xac\x47\xee\x2d\x49\xa6\xcc\x22\xa4\x06\x67\x13\x2f\xf4\x56\x58\x33\x24\x06\x71\xca\x8c\x45\x9a\x78\x05\xcd\xfc\xc7\x1e\x84\x5b\x04\x5a\x11\x2a\x9a\x78\x0b\xc1\x29\x9d\x70\x9c\x8b\x18\xfd\xea\xe5\x14\x84\x12\x24\x98\xf4\x6d\xcc\x24\x4e\x46\x1e\x28\x96\xe1\xc4\x9b\x0b\x5c\xe4\xda\xd0\x3e\x71\x02\x27\xc8\x13\xf4\x20\x25\xca\x7d\xfc\x54\x88\xf9\xc4\xbb\xf6\x0b\xe6\xc7\x3a\xcb\x19\x89\xa9\xc4\x75\x7e\x29\xd4\x55\xeb\x87\x25\x46\x22\x0e\x67\x6c\x2e\x62\xad\x02\x11\x6b\x0f\x0c\xca\x89\xe7\x5e\x3d\xa0\x32\xc7\x89\x27\x32\x96\x60\x78\xed\xd7\x63\x5b\xa6\xd4\xb6\xbe\x44\x1b\x1b\x91\x93\x70\x34\x9d\x75\x1f\x44\x96\x4b\x04\x96\xe7\x46\xcf\x99\x84\x85\x36\x57\x33\xa9\x17\x30\xd3\x06\xfe\x22\xe8\x87\x62\x0a\xef\x0a\x29\xe1\x3d\x7e\x2a\xd0\x92\x85\xc2\x0a\x95\x40\xac\xb3\x0c\x15\xd9\x00\x9e\x17\x42\x12\x68\x05\x94\x62\xcb\x91\x1b\x4d\x18\x13\x72\x98\x1a\xa6\xe2\x14\x9e\xbd\xbb\x08\x2a\xcb\xfa\xbd\x0c\x67\xda\xc9\x4a\xb4\x4e\x24\xb2\x5c\xd8\x20\xd6\x59\x18\x5b\xfb\xa7\x19\xcb\x84\x2c\x27\xef\xf5\x54\x93\x7e\xf2\x60\x38\x3c\x3d\x1f\x0e\x9b\x10\x58\x2a\x25\xda\x14\x91\xda\x40\x10\x5e\x93\x63\xf3\x76\x44\xf3\x48\x3d\x7f\x78\xad\x95\xbe\xbb\x92\x98\xab\x4b\x1b\xc4\x52\x17\x7c\x26\x99\xc1\x4a\x09\xbb\x64\xd7\xa1\x14\x53\x1b\xea\x98\xdc\x42\xd9\xf0\x3c\x38\x0f\x86\xdd\x6b\xe0\x44\x6e\xe9\xdc\x9f\x16\x35\xe1\x2e\xce\xba\x8e\xc2\x65\x21\x8d\xa7\x9a\x97\x2b\x12\xb9\x98\x43\x2c\x99\xb5\x13\x4f\xb1\xf9\x94\x19\xa8\x1f\x7e\xaa\x33\xcc\x59\x82\x2b\xea\x37\x19\x5c\x06\x31\xa1\xd0\x40\x3c\xdb\x20\xab\x48\x0b\xb9\x2e\xda\x57\x6c\xde\x8a\x37\x22\x49\xa9\x87\xa9\x71\x33\x1a\xb3\xd6\x4f\xa9\x13\xe1\xd2\xb5\x96\x34\x2d\x88\xb4\x82\xfa\xe1\xeb\x82\xa4\x50\xc8\xbd\xe8\xef\x8e\x6a\x1c\xb2\x68\x1c\x4a\xd1\x63\x4b\x58\xc8\x0d\x47\x42\x2e\xe6\x2b\x81\xd8\x78\x5d\x71\x73\xca\x94\x42\xb3\x27\x0e\x35\x81\xef\x92\x02\xba\x98\xf4\x05\x24\x1d\x45\x4d\xb1\x3d\x6b\x8a\xcd\x56\x45\xb6\x56\x5d\xe3\x30\x1d\xf5\xf0\xe6\xd1\x4f\xda\x5c\x59\x58\x08\x4a\xdb\x1a\xeb\x82\xf4\x8d\x17\x6d\xd6\x1b\x5a\x17\x0d\x20\x0d\xa8\x66\xda\xc4\xb8\xa6\xa5\xab\x76\x0b\x53\x9c\x69\x83\x90\xa1\x49\x84\x4a\x82\x71\x98\xf7\x68\xdf\xf6\x96\xc5\xae\x8d\xd8\x5d\x4b\xb8\x77\xf9\xbc\x68\x6c\x73\xa6\xda\xc1\x26\xfd\xa1\x79\xfa\x19\x33\x57\x7e\x22\x28\x2d\xa6\x5e\x34\x0e\x1d\x69\xf4\x41\x24\x0a\x2e\xaa\x15\xde\xaf\xf0\xf3\xe7\xe0\xa5\x8e\xed\x8f\x46\xde\xdc\x6c\xa9\x7d\x8f\x8c\x57\x4d\xca\x91\xf4\xca\xda\xc8\x83\xdd\x99\xd2\x9b\x2a\x33\x64\x54\x98\xa3\x6a\xa6\x37\x3f\xce\xa2\x0f\x48\x45\xde\xa4\x07\x1a\x97\x0c\x67\xbd\xc9\xf0\xc2\x20\x23\x04\x06\x52\x58\x02\x3d\x03\x42\x96\x65\x8c\xd0\x02\x53\xbc\xea\xcd\x85\x12\x54\x42\x86\xd9\x14\x8d\x75\x89\x50\xaf\x39\x42\xee\x12\xc1\x34\xe9\x76\x0a\x96\xb4\x41\x0e\xa2\x6e\xdf\xaf\x9f\x5d\xbc\xf9\xf8\xec\xe2\xcd\xab\xf7\x1f\x60\x26\x24\xba\xf1\x52\x17\x06\x0c\xe6\xda\x0a\xd2\xa6\xac\x73\x64\x6f\x92\x64\x4c\x34\x7e\xee\xcc\x10\x17\xc5\x47\xe0\xca\xd7\xc2\xc9\x23\xb0\x52\xc7\x03\x80\xd1\xd9\x63\x78\x5e\x92\xcb\xde\xad\x85\xe8\x58\x89\x4d\xdd\xb6\xdf\x37\x57\xcf\x9b\x68\x4c\x3c\x1a\x8d\x43\xe2\xd5\xaf\xe7\x86\x71\x78\x5f\xf2\x9f\x71\x61\xaf\x04\x7c\x27\xe9\xe9\xd4\x30\x1e\x98\x76\xe8\xfb\x8c\x09\xe9\x9a\xf4\x77\x09\x3d\x85\x93\xef\xdd\x6c\x37\x39\xa8\xe5\x84\x64\x0e\xeb\x3c\xeb\x74\xbe\x66\x44\xf0\x46\x1b\x23\x6c\xa5\x30\x63\x44\x81\xaa\xde\x37\xb5\xb9\xa9\x7a\xe6\x36\xaa\xce\x3b\x55\x2f\xb5\x82\xb7\x32\xb3\xe4\xd2\xdb\xe9\xe2\x5a\x05\xba\x1e\xc8\x36\x95\x71\xad\x54\xe9\x73\xad\xe8\x36\xca\x1e\x2c\x63\xa9\xa7\xf0\x43\x69\xb8\x50\xf6\xaa\xac\x43\xa9\xa7\x41\xda\x8e\x6c\xaa\xa3\x14\xbb\xb9\xdb\x28\x7c\xd8\x29\xfc\xab\x46\xf8\xc8\x4a\xa9\x4d\xa5\xed\x52\x63\x40\xd5\xeb\xa6\xaa\x4b\x8d\xf5\x84\x64\x8a\xdf\x46\xd7\xa3\xa5\xae\xc2\x92\x50\xf0\x37\x94\x12\x1b\x75\xd5\x48\x70\x55\x8d\x6c\x6a\x54\x9a\xa3\xd5\xf1\x15\x1e\x8c\xe5\x38\xdc\x91\xb4\xff\xed\x86\xf3\x0e\x15\x77\x68\xae\xdb\x91\x76\xb6\x9c\x75\x0c\xc8\x0c\x82\x41\x87\x7e\xdd\x96\x53\xf6\x74\x1c\xd7\x87\x5c\x02\xae\x0d\xc4\x4c\x29\x4d\x30\xad\x37\x1c\xe4\x50\x28\x12\x12\x98\x94\x2b\x5b\x52\x2d\x3b\x46\x31\x47\xbe\xbd\x21\xf5\x45\x6c\xc5\x61\x61\x6d\x81\x7d\x5d\xe7\xd8\xa8\x6c\xd1\x56\x07\x0e\xa8\x1f\x7e\x5e\xc7\x6b\x07\xdf\x26\x6f\xe5\x64\x03\xca\x2b\x60\x36\xf1\xb8\xb0\xb9\x64\xe5\x13\xa5\xd5\xe6\xba\x6d\x49\xda\xb7\x4b\x26\x82\xfc\x4a\x7c\xb7\x47\xee\xb6\x68\x77\x2f\x6d\x0d\x3e\x60\xc8\x41\x8a\xda\x5c\x32\x5a\x25\xd1\x07\x9d\x61\x13\x2e\x48\xd9\x1c\xd5\x7d\x87\x8b\x1c\xee\x71\xf0\xa4\x44\x1a\x87\x0d\xe5\x61\x91\x79\x34\x82\x9c\x59\x8b\xbc\x4a\x9f\x11\x34\xf1\xaf\xe5\xf7\x82\x95\x35\xfe\xfd\x9e\x43\x0d\x53\x8f\xb0\xc3\x41\xd2\x7d\xab\x91\x1b\x91\x09\x12\x73\xf4\xb9\x26\xe0\x9a\xfc\xc4\xa0\x3b\xc9\x36\x6b\x03\x63\xcc\x22\x77\x4e\xe2\xe3\x10\xb3\x08\xfe\xfd\xcf\x7f\xd5\xcb\x1b\xb9\x4d\x77\xea\x26\x1a\x3f\x1b\x86\x7e\x1c\xfb\x05\xec\x2a\x51\x4a\xbd\x58\x37\x6c\xa5\xf8\x37\x8d\x13\xb6\x2a\x6d\x41\x20\x6c\x17\xfc\xb6\x54\x8f\xb6\x75\x1b\x7f\xaf\xcf\xee\xde\xeb\xfb\xa7\x8e\xef\x9a\x5f\xa9\x6d\xb6\x11\x83\x9f\x9a\xd3\xf2\xce\xb6\xd9\x61\xb9\xf6\xc0\xdc\x1e\x94\xab\x46\x55\xe3\xf9\x8b\x16\x9b\x9d\x82\x50\x5c\xc4\x8c\x5c\x94\x29\x45\x61\x96\xe7\x72\xd2\x75\xcf\xac\x98\xe3\x94\xa9\x04\x2d\xd2\x1d\xfb\x63\xad\xdd\xfa\x4c\x09\x87\x1a\xbf\x60\xbb\xac\x04\x7b\x20\xb8\x63\xab\x1c\xf6\x47\xb7\x6d\x7e\x63\x91\x25\xbd\x2c\x60\x4d\x3c\xf1\x52\xa2\xdc\x3e\x09\x43\x7b\x1e\xb0\x8c\xfd\xac\x15\x5b\xd4\xc7\xf8\x42\xcc\x58\x8c\x36\xac\xff\xd2\x42\x10\xa1\x09\x19\xa5\x62\x3e\x67\x14\x8e\xce\x1e\x07\x97\x79\xb2\x76\x3f\xd2\xe7\xca\x11\xcd\xd0\x55\xcd\x1a\x48\xac\x2b\xa7\xf1\x18\x39\x38\xdc\x00\xca\xe5\xc5\x71\x02\xbb\x14\x38\xd4\xac\x6f\x5d\x2b\x70\x78\x81\xce\x7e\x9d\x0b\xb4\xc4\xd5\xff\x3f\xab\xf3\x15\xd1\xc6\xd3\xdf\xe0\xc6\x21\x91\xbf\xc1\x8d\x2f\x6d\xd7\xff\x20\xdc\x80\xb6\x6c\x6e\x8f\xc8\x61\xf3\x32\xec\x98\xfb\xac\xed\xd2\x81\xd7\xd5\x46\xbe\x7a\xa2\x3a\x26\x75\xbe\x74\xef\xf9\x65\x67\xcf\xd5\xeb\x5f\x48\x05\xe7\xdd\x87\x9b\x1e\xea\xfb\x89\x11\xdc\x9f\x49\xbc\xf6\x97\x7c\xb9\x11\xb1\x50\xc9\xfd\xbd\xe0\x63\x95\x13\xa5\xec\x21\x86\x06\x93\xfd\xd9\x20\xf6\xc3\x30\xa8\x6b\x7b\xd8\x7f\xb9\xb9\x23\x38\x77\x31\xe1\x23\xb2\x6c\xaf\x09\xa3\x87\x5f\xdd\x86\x57\x8a\xd0\xe4\x46\xd8\xfd\xc1\x78\xe1\x96\x21\x26\xf8\xd1\x1e\x6b\xd1\x2d\x72\xc3\x88\xe9\x54\xef\x49\x87\x83\xdf\x0e\xd8\x81\x0b\xff\xf5\xeb\xe5\xdb\xdf\x27\xc3\xbe\x0b\xe5\x35\x69\x16\x73\x66\x18\x69\xe3\x45\xda\xec\xda\xfa\x8e\xb5\x77\xf5\x76\x3a\x14\xca\x12\x93\x32\xf4\xa2\x97\x7a\xa1\xa4\x66\x7c\xcb\x9a\x43\x21\xaf\xbf\xe7\xad\x83\xae\x03\xdf\x9e\x2e\x3f\x15\x68\xca\xf0\x3c\x18\x06\x43\x9f\xc9\x3c\x65\xa3\x66\x2c\xc8\x84\x0a\x2e\x6d\x15\xa3\x4a\x6e\xf4\x8b\x14\x2d\x58\x99\x6b\xa1\xc8\x86\x0f\x9c\xae\x56\x49\x37\x7c\x58\xdd\x72\xe0\xdb\x13\xae\xe3\xc2\x81\xb7\x41\x60\x90\xf1\xf2\x64\x56\xa8\xea\x0b\xc4\xc9\x00\x3e\xaf\x85\xec\xdb\x93\xfb\xc1\xfa\xe1\xe6\xfe\xa0\x53\xba\x64\xe3\xc2\x60\xf5\x6b\x93\xbf\x95\xe2\x7d\xb3\x3c\xbe\x0c\x02\x8e\x92\x95\x27\x0f\x87\xc3\x41\x30\x63\x1c\x2f\xd4\xc9\x68\x38\x1c\x0e\x9e\x1e\x60\x3d\xeb\x58\x47\x9b\xbc\xa7\xb0\xd3\x85\xf6\x5f\x18\x02\x80\x45\xfa\x28\x32\xd4\xc5\x8a\xf1\x83\x7e\xfa\x4e\xff\x46\x00\x20\x68\xe0\x51\x8d\x83\xbc\x41\x40\x78\x4d\x27\xde\x33\x29\x57\x81\x53\x83\x08\x02\x6f\x70\x37\xe9\x79\x27\xf8\x0c\x6c\x11\xc7\x68\xed\xac\x68\x35\xdc\x5e\xea\x0a\x7a\x18\x04\x8c\xf3\x17\xae\xc0\x4e\xbc\x25\xd8\x71\xa9\x90\xe9\x39\xae\x4c\xb4\xf4\x7d\xeb\x72\x84\x07\x52\x3c\x91\xcc\x92\x1f\xa7\x0e\x20\xb9\x52\x5f\x79\xef\xbc\x5b\x45\x29\x52\xeb\x2b\x0b\x89\xd6\xfc\xae\x4a\x3b\x8c\xbf\xea\x64\x33\xd5\x44\x71\xd3\xd3\x4d\xc6\x3b\x7a\x1b\x81\x6b\xc8\xd5\xdf\x75\x37\xeb\x8c\x3d\x22\xd5\x9b\x14\xbd\x39\x85\x3f\xee\xa0\xb8\x59\x1b\xbd\x39\xfd\xac\x67\x33\x8b\xf4\xc4\x7b\x38\xfc\xbd\x77\xb3\x4c\x89\x95\x9f\xeb\xed\x60\x1c\xd6\x5f\xac\xc7\x61\xfd\xdf\x46\xfe\x13\x00\x00\xff\xff\x59\xc7\x1d\xfb\x47\x22\x00\x00")

func filesBrandHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesBrandHtml,
		"files/brand.html",
	)
}

func filesBrandHtml() (*asset, error) {
	bytes, err := filesBrandHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/brand.html", size: 8775, mode: os.FileMode(420), modTime: time.Unix(1585151454, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x41\x6f\xd3\x4c\x10\x86\xef\xdf\xaf\x98\x6f\x2f\x39\x50\x7b\x83\xe0\x80\x2a\x6f\x11\x02\x0e\x1c\x10\x15\x42\x42\x3d\x55\x93\xf5\xd8\x1e\xb1\xde\x49\x77\xc7\x6e\xa3\xa8\xff\x1d\x39\x6e\x94\x92\x46\x01\x5f\xc6\x33\xfb\xbe\xf3\x8c\xed\x91\xab\xff\x3f\x7d\xfb\xf8\xe3\xe6\xfa\x33\x74\xda\x87\xab\xff\xaa\x39\x00\x00\x54\x1d\x61\x3d\xdf\xee\x52\x65\x0d\x74\x55\xd9\x39\x1e\xea\x3d\x29\x82\xef\x30\x65\x52\x67\x06\x6d\x8a\x77\x06\xec\x0b\x81\x44\xa5\xa8\xce\xdc\x73\xad\x9d\xab\x69\x64\x4f\xc5\x2e\xb9\x00\x8e\xac\x8c\xa1\xc8\x1e\x03\xb9\xd7\x06\x22\xf6\xe4\xcc\xc8\x74\xbf\x96\xa4\xe7\xda\x31\x39\xaa\x5b\x32\xd0\xa9\xae\x0b\xba\x1b\x78\x74\xe6\xa1\x18\xb0\xf0\xd2\xaf\x51\x79\x15\xe8\x4f\x7f\xe0\xf8\x0b\xba\x44\x8d\x33\x36\x2b\x2a\x7b\xdb\xe0\xc8\x5e\x62\xc9\x5e\x0c\x24\x0a\xce\x4c\xa9\x01\xdd\xac\xc9\x19\xee\xb1\x25\xfb\x50\xcc\xb5\xd3\xad\x16\x13\x3e\x5f\x5a\xdb\x48\xd4\x5c\xb6\x22\x6d\x20\x5c\x73\x2e\xbd\xf4\xd6\xe7\xfc\xbe\xc1\x9e\xc3\xc6\x7d\x97\x95\xa8\x5c\xbe\x5d\x2e\x2f\xde\x2c\x97\x8b\x1d\x6d\x91\x75\x13\x28\x77\x44\xba\x98\x99\x0b\xa5\x07\x9d\x6c\x8b\xd3\x83\x9f\xa5\x4d\x73\xee\x71\x5f\x51\x29\x31\x86\x57\x5f\xbc\xc4\xfc\xf4\x70\x07\xdc\x5f\xdf\xcc\x2c\x2d\x7d\x3e\xe3\xad\xec\x61\x53\xaa\x95\xd4\x9b\x67\x2d\x6b\x1e\xc1\x07\xcc\xd9\x99\xe9\x93\x21\x47\x4a\x10\xa4\x95\x41\xcd\x41\x76\x2c\xed\x29\x67\x6c\x09\x9e\x62\xd1\x0c\x21\xcc\xbb\x72\x64\x9a\xae\xed\x16\xb8\x01\xba\x83\x92\x52\x92\x04\x26\xca\x2d\x7a\x4f\x39\xdf\xee\x0a\x06\x1e\x1f\x5f\x98\x6e\x64\x80\x5a\x20\x8a\x42\x87\x23\xc1\x9a\x52\xcf\x39\xb3\x44\x50\x01\x9f\x08\x95\x00\x23\xa0\xf7\x32\x44\x2d\x4f\x51\x29\x64\x3a\x42\x0b\x0e\xda\x9d\xc1\xfe\x24\xc0\x44\x30\x44\x5c\x05\x9a\x48\x93\x9e\xa2\xb2\x9f\x78\x1b\x19\xfe\x15\xc4\x51\x29\x45\x0c\x67\x58\x1f\x22\xec\x55\x30\xbb\x3a\xcc\x20\xde\x0f\x29\x51\x5d\xc2\x75\x20\xcc\x04\x9a\x36\x80\x2d\x72\x84\x30\xed\xca\xa9\x01\x26\xfe\x09\xc0\x76\xbb\x1f\xe7\xf4\x21\xc5\xfa\xe8\xa0\xb2\x35\x8f\xcf\xb6\xe3\x90\x56\x76\x5e\x9c\xca\xce\x3f\xa0\xdf\x01\x00\x00\xff\xff\x34\x79\x20\x12\x98\x04\x00\x00")

func filesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesErrorHtml,
		"files/error.html",
	)
}

func filesErrorHtml() (*asset, error) {
	bytes, err := filesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/error.html", size: 1176, mode: os.FileMode(420), modTime: time.Unix(1585151454, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x4d\x6f\xdb\x30\x0c\x86\xef\xfd\x15\xaa\x2e\x39\xac\xb2\x52\xac\x87\xa2\xb0\x32\x0c\x6b\x06\xec\x50\x74\x48\x8b\x01\x3b\x15\x8c\xcc\xd8\x4c\x65\xc9\x93\xe8\x7c\xa0\xeb\x7f\x1f\x1c\x37\x48\x9b\x7e\x6c\x03\x36\x5f\x64\x52\x7a\xdf\x87\x94\x09\xe7\x87\xe7\x97\x9f\xae\xbf\x7f\x1d\x8b\x8a\x6b\x37\x3a\xc8\xbb\x45\xf8\x52\x41\xd3\x18\x09\x4d\x23\x85\x03\x5f\x1a\x89\x5e\x8e\x0e\x84\x10\x22\xaf\x10\x8a\xfe\x75\x13\x32\xb1\xc3\x51\xae\xfb\x75\x97\x9f\x42\x42\x51\x45\x9c\x19\xa9\xe5\xa3\x7c\x8d\x0c\xc2\x56\x10\x13\xb2\x91\x2d\xcf\xd4\xa9\x14\xfa\xd9\x81\xe0\x19\x3d\x1b\xb9\xa4\x82\x2b\x53\xe0\x82\x2c\xaa\x4d\x70\x24\xc8\x13\x13\x38\x95\x2c\x38\x34\xc7\x52\x78\xa8\xd1\xc8\x05\xe1\xb2\x09\x91\xdf\xb2\x23\x34\x58\x94\x28\x45\xc5\xdc\x28\xfc\xd1\xd2\xc2\xc8\x95\x6a\x41\xd9\x50\x37\xc0\x34\x75\xf8\x54\xef\xc8\xdf\x6e\xfb\x48\x0c\x4c\x56\xcf\x60\x41\x36\xf8\x8c\x6c\x90\x22\xa2\x33\xb2\x0b\xa5\xe0\x75\x83\x46\x52\x0d\x25\xea\x95\xea\x73\x2f\x5b\x0d\x3a\x7c\x3a\xd3\x7a\x16\x3c\xa7\xac\x0c\xa1\x74\x08\x0d\xa5\xcc\x86\x5a\xdb\x94\x3e\xcc\xa0\x26\xb7\x36\x93\x30\x0d\x1c\xce\x4e\x86\xc3\xa3\xf7\xc3\xe1\x60\x43\x1b\x24\x5e\x3b\x4c\x15\x22\x0f\x7a\xe6\x80\x71\xc5\x9d\x6c\xf0\x72\xe1\x6f\xd2\xba\x3a\xb7\xb8\x0b\x60\x8c\x04\xee\xdd\x17\x1b\x7c\x7a\x68\x6e\x87\xfb\xed\xcd\xf4\x47\x33\x9b\x5e\xd1\xf6\x13\xa4\x77\x23\x94\x4f\x43\xb1\x7e\xe4\x59\xd0\x42\x50\x61\x64\x0c\x81\xe5\x28\xd7\x05\x2d\xf6\x76\x7d\xa9\xba\x0f\xfd\x6c\x2f\xd9\x48\x0d\xef\x12\xdd\xb3\x24\x5f\x84\x65\x76\x75\xfd\xf1\x7a\x7c\xf3\x79\x72\x79\x71\x73\x35\x9e\x7c\x1b\x4f\xcc\xdd\x9d\xc8\xc4\x4f\x31\x4f\xc1\x8b\xfb\xfb\x9d\x89\xde\xba\xec\xfb\x8a\x14\xad\x91\x5a\xdb\xc2\xcf\x53\x66\x5d\x68\x8b\x99\x83\x88\x9b\x1b\x84\x39\xac\xb4\xa3\x69\xd2\xe0\xcb\xd6\x41\xcc\xe6\x49\x1f\x67\x27\xd9\xe9\xa3\x44\xd7\xcd\x7e\x8d\xff\xc6\x5c\xc5\xd0\x32\xfe\x67\x04\xa6\xd0\x46\xfb\x2a\xe5\x50\xa9\x3d\xd4\x76\x22\x36\xb9\xa7\x32\xa1\xd4\x6b\x05\x3e\xa8\xb6\x58\x0e\x65\xe9\x50\xa5\x25\xb1\xad\xb2\x9a\xfc\x1f\x75\xf9\x60\xe2\xcb\x73\x02\x17\xca\xbf\xd5\xd9\x0a\xed\x6d\x0a\x2d\xbf\x20\xca\x75\x3f\xb0\xb9\xee\xff\x97\xbf\x02\x00\x00\xff\xff\xfb\xe5\x8f\xb0\x40\x05\x00\x00")

func filesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesIndexHtml,
		"files/index.html",
	)
}

func filesIndexHtml() (*asset, error) {
	bytes, err := filesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/index.html", size: 1344, mode: os.FileMode(420), modTime: time.Unix(1586355648, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesLogoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x31\x93\xd3\x4c\x0c\xed\xef\x57\xe8\x53\xe3\xe2\x3b\x67\xc3\x40\xc1\xdc\x78\x43\x01\x14\x14\x0c\x0c\x43\x73\xa5\xb2\x96\x6d\x0d\xeb\x5d\x63\xc9\x4e\xf2\xef\x19\xc7\x77\x93\x00\x37\xa1\x92\x9f\x2c\xbd\xf7\xb4\xab\xad\xfe\xfb\xf0\xe5\xfd\xf7\xc7\xaf\x1f\xa1\xb3\x3e\xee\xee\xaa\x25\x40\x6a\x4b\x1a\x06\x8f\x34\x0c\x08\x91\x52\xeb\x91\x13\xee\xee\x00\x00\xaa\x8e\xa9\x5e\x3f\xcf\xd0\xc4\x22\xef\x2a\xb7\xc6\x4b\x7e\x4f\xca\xd0\x8d\xdc\x78\x74\x78\x95\xef\xd9\x08\x42\x47\xa3\xb2\x79\x9c\xac\x29\xdf\x22\xb8\xbf\x0a\x72\x32\x4e\xe6\xf1\x20\xb5\x75\xbe\xe6\x59\x02\x97\x67\x70\x0f\x92\xc4\x84\x62\xa9\x81\x22\xfb\x57\x08\x89\x7a\xf6\x38\x0b\x1f\x86\x3c\xda\x2d\x3a\x61\xcf\x75\xcb\x08\x9d\xd9\x50\xf2\xcf\x49\x66\x8f\xc7\x72\xa2\x32\xe4\x7e\x20\x93\x7d\xe4\xdf\xfb\xa3\xa4\x1f\xcf\x73\xa8\x91\x49\x70\x0d\xcd\x12\x72\xda\x48\xc8\x08\x23\x47\x8f\x0b\x44\xb0\xd3\xc0\x1e\xa5\xa7\x96\xdd\xb1\x5c\x73\x2f\x53\x15\x8b\xbc\x3e\x38\xd7\xe4\x64\xba\x69\x73\x6e\x23\xd3\x20\xba\x09\xb9\x77\x41\xf5\x5d\x43\xbd\xc4\x93\xff\x96\xf7\xd9\xf2\xc3\x9b\xed\xf6\xfe\xf5\x76\x5b\x9c\xd5\x0a\xb5\x53\x64\xed\x98\xad\x58\x35\x0b\xe3\xa3\x2d\x6d\xc5\xcb\xc6\x6f\xaa\x2d\x3e\x9f\xe5\x3e\x93\xf1\x28\x14\xff\xff\x14\x72\xd2\xa7\xe1\x2e\x72\xff\x3c\x99\xb5\x74\x13\xf4\x46\x6f\xe5\x2e\x1b\x54\xed\x73\x7d\xba\xa2\xac\x65\x86\x10\x49\xd5\xe3\x72\x65\x24\x89\x47\x88\xb9\xcd\x93\x5d\xed\xd0\x9f\xa5\x3d\xab\x52\xcb\xf0\x14\xcb\x66\x8a\x71\xdd\x15\xdc\x3d\xe6\x09\x0e\x3c\x32\xe8\x14\x02\xab\x2e\xff\x4e\x0b\x65\xcb\x35\xe4\xc9\x2a\x57\xcb\x7c\xe5\xe0\x02\x2b\xb7\x9a\xab\xdc\xfa\x34\x7e\x05\x00\x00\xff\xff\x16\x92\xe2\x06\x2b\x03\x00\x00")

func filesLogoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesLogoutHtml,
		"files/logout.html",
	)
}

func filesLogoutHtml() (*asset, error) {
	bytes, err := filesLogoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/logout.html", size: 811, mode: os.FileMode(420), modTime: time.Unix(1585151454, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/brand.html":  filesBrandHtml,
	"files/error.html":  filesErrorHtml,
	"files/index.html":  filesIndexHtml,
	"files/logout.html": filesLogoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"brand.html":  &bintree{filesBrandHtml, map[string]*bintree{}},
		"error.html":  &bintree{filesErrorHtml, map[string]*bintree{}},
		"index.html":  &bintree{filesIndexHtml, map[string]*bintree{}},
		"logout.html": &bintree{filesLogoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
