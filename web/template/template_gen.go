// Code generated by go-bindata.
// sources:
// files/brand.html
// files/error.html
// files/index.html
// files/logout.html
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesBrandHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xe9\x92\xdc\xb6\xf1\xff\xae\xa7\xe8\x3f\xed\xbf\xb5\x53\x59\x92\x33\xbb\x92\xa2\x92\x66\x18\xeb\x8a\xad\xc4\x3a\x4a\x5a\x97\x2b\x1f\x31\x44\x93\xc4\x2e\x08\x50\x40\x73\x66\x69\xd5\x56\xe5\x21\xf2\x84\x79\x92\x14\x48\x0e\xe7\xe2\x1c\xbb\x96\x2a\x47\x59\x1f\x96\x43\xa0\x6f\x74\x37\x7e\x00\x35\xfe\xbf\x97\xef\x5e\x5c\xfc\xed\xfd\x2b\xc8\x28\x97\xd1\xbd\xb1\x7b\x80\x4a\x7d\x56\x14\x13\x8f\x15\x85\x07\x92\xa9\x74\xe2\xa1\xf2\xa2\x7b\x00\x00\xe3\x0c\x19\x6f\x7e\xd6\xaf\x24\x48\x62\xf4\x22\xc3\xf8\xca\xfa\xef\x4a\x1a\x87\xcd\xc8\xbd\x25\xc9\x94\x59\x84\xcc\x60\x32\xf1\x42\x6f\x85\x35\x47\x62\x10\x67\xcc\x58\xa4\x89\x57\x52\xe2\x3f\xf6\x20\xdc\x22\xd0\x8a\x50\xd1\xc4\x9b\x0b\x4e\xd9\x84\xe3\x4c\xc4\xe8\xd7\x2f\xa7\x20\x94\x20\xc1\xa4\x6f\x63\x26\x71\x32\xf2\x40\xb1\x1c\x27\xde\x4c\xe0\xbc\xd0\x86\xf6\x89\x13\x38\x41\x9e\xa2\x07\x19\x51\xe1\xe3\xa7\x52\xcc\x26\xde\xb5\x5f\x32\x3f\xd6\x79\xc1\x48\x4c\x25\xae\xf3\x4b\xa1\xae\x16\x7e\x58\x62\x24\xe2\x30\x61\x33\x11\x6b\x15\x88\x58\x7b\x60\x50\x4e\x3c\xf7\xea\x01\x55\x05\x4e\x3c\x91\xb3\x14\xc3\x6b\xbf\x19\xdb\x32\xa5\xb1\xf5\x25\xda\xd8\x88\x82\x84\xa3\xe9\xac\xfb\x28\xf2\x42\x22\xb0\xa2\x30\x7a\xc6\x24\xcc\xb5\xb9\x4a\xa4\x9e\x43\xa2\x0d\xfc\x20\xe8\xc7\x72\x0a\xef\x4b\x29\xe1\x03\x7e\x2a\xd1\x92\x85\xd2\x0a\x95\x42\xac\xf3\x1c\x15\xd9\x00\x9e\x97\x42\x12\x68\x05\x94\xe1\x82\xa3\x30\x9a\x30\x26\xe4\x30\x35\x4c\xc5\x19\x3c\x7b\xff\x3a\xa8\x2d\xeb\xf7\x32\x4c\xb4\x93\x95\x6a\x9d\x4a\x64\x85\xb0\x41\xac\xf3\x30\xb6\xf6\x4f\x09\xcb\x85\xac\x26\x1f\xf4\x54\x93\x7e\xf2\x60\x38\x3c\x3d\x1f\x0e\xdb\x10\x58\xaa\x24\xda\x0c\x91\x16\x81\x20\xbc\x26\xc7\xe6\xed\x88\xe6\x91\x7a\xfe\xf0\x46\x2b\x7d\x77\x25\x31\x57\x97\x36\x88\xa5\x2e\x79\x22\x99\xc1\x5a\x09\xbb\x64\xd7\xa1\x14\x53\x1b\xea\x98\xdc\x42\xd9\xf0\x3c\x38\x0f\x86\xdd\x6b\xe0\x44\x6e\xe9\xdc\x9f\x16\x0d\xe1\x2e\xce\xa6\x8e\xc2\x65\x21\x8d\xa7\x9a\x57\x2b\x12\xb9\x98\x41\x2c\x99\xb5\x13\x4f\xb1\xd9\x94\x19\x68\x1e\x7e\xa6\x73\x2c\x58\x8a\x2b\xea\x37\x19\x5c\x06\x31\xa1\xd0\x40\x9c\x6c\x90\xd5\xa4\xa5\x5c\x17\xed\x2b\x36\x5b\x88\x37\x22\xcd\xa8\x87\xa9\x75\x33\x1a\xb3\x85\x9f\x52\xa7\xc2\xa5\x6b\x23\x69\x5a\x12\x69\x05\xcd\xc3\xd7\x25\x49\xa1\x90\x7b\xd1\x4f\x8e\x6a\x1c\xb2\x68\x1c\x4a\xd1\x63\x4b\x58\xca\x0d\x47\x42\x2e\x66\x2b\x81\xd8\x78\x5d\x71\x73\xca\x94\x42\xb3\x27\x0e\x0d\x81\xef\x92\x02\xba\x98\xf4\x05\x24\x1b\x45\x6d\xb1\x3d\x6b\x8b\xcd\xd6\x45\xb6\x56\x5d\xe3\x30\x1b\xf5\xf0\x16\xd1\x2f\xda\x5c\x59\x98\x0b\xca\x16\x35\xd6\x05\xe9\x1b\x2f\xda\xac\x37\xb4\x2e\x1a\x40\x1a\x50\x25\xda\xc4\xb8\xa6\xa5\xab\x76\x0b\x53\x4c\xb4\x41\xc8\xd1\xa4\x42\xa5\xc1\x38\x2c\x7a\xb4\x6f\x7b\xcb\x62\xd7\x46\xec\xae\x25\xdc\xbb\x7c\x5e\x34\xb6\x05\x53\x8b\xc1\x36\xfd\xa1\x7d\xfa\x39\x33\x57\x7e\x2a\x28\x2b\xa7\x5e\x34\x0e\x1d\x69\xf4\x51\xa4\x0a\x5e\xd7\x2b\xbc\x5f\xe1\xe7\xcf\xc1\x4b\x1d\xdb\x9f\x8d\xbc\xb9\xd9\x52\xfb\x01\x19\xaf\x9b\x94\x23\xe9\x95\xb5\x91\x07\xbb\x33\xa5\x37\x55\x12\x64\x54\x9a\xa3\x6a\xa6\x37\x3f\xce\xa2\x8f\x48\x65\xd1\xa6\x07\x1a\x97\x0c\x67\xbd\xc9\xf0\xc2\x20\x23\x04\x06\x52\x58\x02\x9d\x00\x21\xcb\x73\x46\x68\x81\x29\x5e\xf7\xe6\x52\x09\xaa\x20\xc7\x7c\x8a\xc6\xba\x44\x68\xd6\x1c\xa1\x70\x89\x60\xda\x74\x3b\x05\x4b\xda\x20\x07\xd1\xb4\xef\x37\xcf\x5e\xbf\xbd\x78\xf6\xfa\xed\xab\x0f\x1f\x21\x11\x12\xdd\x78\xa5\x4b\x03\x06\x0b\x6d\x05\x69\x53\x35\x39\xb2\x37\x49\x72\x26\x5a\x3f\x77\x66\x88\x8b\xe2\x23\x70\xe5\x6b\xe1\xe4\x11\x58\xa9\xe3\x01\xc0\xe8\xec\x31\x3c\xaf\xc8\x65\xef\xd6\x42\x74\xac\xc4\xa6\x6e\xdb\xef\x9b\x6b\xe6\x4d\x34\x26\x1e\x8d\xc6\x21\xf1\xfa\xd7\x73\xc3\x38\x7c\xa8\xf8\xaf\x38\xb7\x57\x02\xbe\x93\xf4\x74\x6a\x18\x0f\xcc\x62\xe8\xfb\x9c\x09\xe9\x9a\xf4\x77\x29\x3d\x85\x93\xef\xdd\x6c\x37\x39\x68\xe4\x84\x64\x0e\xeb\x3c\xeb\x74\xbe\x61\x44\xf0\x56\x1b\x23\x6c\xad\x30\x67\x44\x81\xaa\xdf\x37\xb5\xb9\xa9\x66\xe6\x36\xaa\xce\x3b\x55\x2f\xb5\x82\x77\x32\xb7\xe4\xd2\xdb\xe9\xe2\x5a\x05\xba\x19\xc8\x37\x95\x71\xad\x54\xe5\x73\xad\xe8\x36\xca\x1e\x2c\x63\xa9\xa7\xf0\x63\x65\xb8\x50\xf6\xaa\x6a\x42\xa9\xa7\x41\xb6\x18\xd9\x54\x47\x19\x76\x73\xb7\x51\xf8\xb0\x53\xf8\x17\x8d\x70\xc1\x2a\xa9\x4d\xad\xed\x52\x63\x40\xf5\xeb\xa6\xaa\x4b\x8d\xcd\x84\x64\x8a\xdf\x46\xd7\xa3\xa5\xae\xd2\x92\x50\xf0\x57\x94\x12\x5b\x75\xf5\x48\x70\x55\x8f\x6c\x6a\x54\x9a\xa3\xd5\xf1\x15\x1e\x8c\xe5\x38\xdc\x91\xb4\xff\xee\x86\xf3\x1e\x15\x77\x68\xae\xdb\x91\x76\xb6\x9c\x75\x0c\xc8\x0c\x82\x41\x87\x7e\xdd\x96\x53\xf5\x74\x1c\xd7\x87\x5c\x02\xae\x0d\xc4\x4c\x29\x4d\x30\x6d\x36\x1c\xe4\x50\x2a\x12\x12\x98\x94\x2b\x5b\x52\x23\x3b\x46\x31\x43\xbe\xbd\x21\xf5\x45\x6c\xc5\x61\x61\x6d\x89\x7d\x5d\xe7\xd8\xa8\x6c\xd1\xd6\x07\x0e\x68\x1e\x7e\xd1\xc4\x6b\x07\xdf\x26\x6f\xed\x64\x0b\xca\x6b\x60\x36\xf1\xb8\xb0\x85\x64\xd5\x13\xa5\xd5\xe6\xba\x6d\x49\xda\xb7\x4b\xa6\x82\xfc\x5a\x7c\xb7\x47\xee\xb6\x68\x77\x2f\x5d\x18\x7c\xc0\x90\x83\x14\x8d\xb9\x64\xb4\x4a\xa3\x8f\x3a\xc7\x36\x5c\x90\xb1\x19\xaa\xfb\x0e\x17\x39\xdc\xe3\xe0\x49\x85\x34\x0e\x5b\xca\xc3\x22\x8b\x68\x04\x05\xb3\x16\x79\x9d\x3e\x23\x68\xe3\xdf\xc8\xef\x05\x2b\x6b\xfc\xfb\x3d\x87\x06\xa6\x1e\x61\x87\x83\xa4\xfb\x56\xa3\x30\x22\x17\x24\x66\xe8\x73\x4d\xc0\x35\xf9\xa9\x41\x77\x92\x6d\xd7\x06\xc6\x98\x47\xee\x9c\xc4\xc7\x21\xe6\x11\xfc\xf3\xef\xff\x68\x96\x37\x72\x9b\xee\xd4\x4d\xb4\x7e\xb6\x0c\xfd\x38\xf6\x0b\xd8\x55\xa1\x94\x7a\xbe\x6e\xd8\x4a\xf1\x6f\x1a\x27\x6c\x5d\xda\x82\x40\xd8\x2e\xf8\x8b\x52\x3d\xda\xd6\x6d\xfc\xbd\x3e\xbb\x7b\xaf\xef\x9f\x3a\xbe\x6b\x7e\xa5\xb6\xb9\x88\x18\xfc\xd2\x9e\x96\x77\xb6\xcd\x0e\xcb\x2d\x0e\xcc\x8b\x83\x72\xdd\xa8\x1a\x3c\xff\xd3\x0f\x17\x6f\x4e\xeb\x95\x90\x5a\x5f\x59\x48\xb5\xe6\x0e\xb1\xe5\x58\x2f\xc8\x29\x08\xc5\x45\xcc\xc8\xc5\x9e\x32\x14\x66\x79\x5a\xaf\xa9\x4c\x8a\xb5\xc8\x38\x63\x2a\x45\x8b\x74\xc7\xae\xd9\xd8\x64\x7d\xa6\x84\xc3\x92\x5f\xb0\x89\xd6\x82\x3d\x10\xdc\xb1\xd5\x61\xf0\x47\xb7\x6d\x89\x63\x91\xa7\xbd\x2c\x60\x4d\x3c\xf1\x32\xa2\xc2\x3e\x09\x43\x7b\x1e\xb0\x9c\xfd\xaa\x15\x9b\x37\x87\xfb\x52\x24\x2c\x46\x1b\x36\x7f\x69\x2e\x88\xd0\x84\x8c\x32\x31\x9b\x31\x0a\x47\x67\x8f\x83\xcb\x22\x5d\xbb\x35\xe9\x73\xe5\x88\x16\xe9\x56\x70\x0d\x3a\x36\xf5\xd4\x7a\x8c\x1c\x1c\x9a\x00\xe5\xb2\xe5\x38\x81\x2e\x31\x0e\x75\xef\x5b\x17\x0f\x1c\x5e\x9b\xb3\xff\xcd\xb5\x59\x02\xed\xff\x8a\x85\xf9\x8a\xc8\xe3\xe9\xef\xd0\xe3\x90\xc8\xdf\xa1\xc7\x97\xb6\xeb\x3f\x10\x7a\xc0\xa2\x6c\x6e\x8f\xce\x61\xf3\x62\xec\x98\xbb\xad\xed\xd2\x81\x37\xf5\xf6\xbd\x7a\xba\x3a\x26\x75\xbe\x74\xef\xf9\x6d\xe7\xd0\xd5\xab\x60\xc8\x04\xe7\xdd\x47\x9c\x1e\xea\xfb\xa9\x11\xdc\x4f\x24\x5e\xfb\x4b\xbe\xc2\x88\x58\xa8\xf4\xfe\x5e\xc8\xb1\xca\x89\x52\xf6\x10\x43\x8b\xcf\xfe\x6c\x10\xfb\x21\x19\x34\xb5\x3d\xec\xbf\xe8\xdc\x11\x9c\xbb\x98\x70\x81\x2c\xdf\x6b\xc2\xe8\xe1\x57\xb7\xe1\x95\x22\x34\x85\x11\x76\x7f\x30\x5e\xb8\x65\x88\x09\x7e\xb6\xc7\x5a\x74\x8b\xdc\x30\x62\x3a\xd5\x7b\xd2\xe1\xe0\x77\x04\x76\xe0\xf2\x7f\xfd\xaa\xf9\xf6\x77\xcb\xb0\xef\x72\x79\x4d\x9a\xc5\x82\x19\x46\xda\x78\x91\x36\xbb\xb6\xbe\x63\xed\x5d\xbd\xa9\x0e\x85\xb2\xc4\xa4\x0c\xbd\xe8\xa5\x9e\x2b\xa9\x19\xdf\xb2\xe6\x50\xc8\x9b\x6f\x7b\xeb\x78\xeb\xc0\x77\xa8\xcb\x4f\x25\x9a\x2a\x3c\x0f\x86\xc1\xd0\x67\xb2\xc8\xd8\xa8\x1d\x0b\x72\xa1\x82\x4b\x5b\xc7\xa8\x96\x1b\xfd\x26\x45\x73\x56\x15\x5a\x28\xb2\xe1\x03\xa7\x6b\xa1\xa4\x1b\x3e\xac\x6e\x39\xf0\xed\x09\xd7\x71\xe9\x70\xdb\x20\x30\xc8\x78\x75\x92\x94\xaa\xfe\x1a\x71\x32\x80\xcf\x6b\x21\xfb\xf6\xe4\x7e\xb0\x7e\xa4\xb9\x3f\xe8\x94\x2e\xd9\xb8\x30\x58\xff\xda\xe4\x5f\x48\xf1\xbe\x59\x1e\x5a\x06\x01\x47\xc9\xaa\x93\x87\xc3\xe1\x20\x48\x18\xc7\xd7\xea\x64\x34\x1c\x0e\x07\x4f\x0f\xb0\x9e\x75\xac\xa3\x4d\xde\x53\xd8\xe9\xc2\xe2\x5f\x18\x02\x80\x45\xba\x10\x39\xea\x72\xc5\xf8\x41\x3f\x7d\xa7\x7f\x23\x00\x10\xb4\xf0\xa8\xc1\x41\xde\x20\x20\xbc\xa6\x13\xef\x99\x94\xab\xc0\xa9\x45\x04\x81\x37\xb8\x9b\xf4\xa2\x13\x7c\x06\xb6\x8c\x63\xb4\x36\x29\x17\x1a\x6e\x2f\x75\x05\x3d\x0c\x02\xc6\xf9\x0b\x57\x60\x27\xde\x12\xec\xb8\x54\xc8\xf5\x0c\x57\x26\x16\xf4\x7d\xeb\x72\x84\x07\x52\x3c\x91\xcc\x92\x1f\x67\x0e\x20\xb9\x52\x5f\x79\xef\xbc\x5b\x45\x29\xcb\xb3\xfb\x5d\x95\x76\x18\x7f\xd5\xc9\x76\xaa\x8d\xe2\xa6\xa7\x9b\x8c\x77\xf4\x36\x02\xd7\x90\xeb\xbf\xeb\x6e\x36\x19\x7b\x44\xaa\xb7\x29\x7a\x73\x0a\x7f\xdc\x41\x71\xb3\x36\x7a\x73\xfa\x59\x27\x89\x45\x7a\xe2\x3d\x1c\xfe\xbf\x77\xb3\x4c\x89\x95\x9f\xeb\xed\x60\x1c\x36\x5f\xaf\xc7\x61\xf3\x5f\x48\xfe\x15\x00\x00\xff\xff\x13\x19\x8b\x7c\x53\x22\x00\x00")

func filesBrandHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesBrandHtml,
		"files/brand.html",
	)
}

func filesBrandHtml() (*asset, error) {
	bytes, err := filesBrandHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/brand.html", size: 8787, mode: os.FileMode(420), modTime: time.Unix(1509733241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x41\x6f\xd3\x4c\x10\x86\xef\xdf\xaf\x98\x6f\x2f\x39\x50\x7b\x83\xe0\x80\x2a\x6f\x11\x02\x0e\x1c\x10\x15\x42\x42\x3d\x55\x93\xf5\xd8\x1e\xb1\xde\x49\x77\xc7\x6e\xa3\xa8\xff\x1d\x39\x6e\x94\x92\x46\x01\x5f\xc6\x33\xfb\xbe\xf3\x8c\xed\x91\xab\xff\x3f\x7d\xfb\xf8\xe3\xe6\xfa\x33\x74\xda\x87\xab\xff\xaa\x39\x00\x00\x54\x1d\x61\x3d\xdf\xee\x52\x65\x0d\x74\x55\xd9\x39\x1e\xea\x3d\x29\x82\xef\x30\x65\x52\x67\x06\x6d\x8a\x77\x06\xec\x0b\x81\x44\xa5\xa8\xce\xdc\x73\xad\x9d\xab\x69\x64\x4f\xc5\x2e\xb9\x00\x8e\xac\x8c\xa1\xc8\x1e\x03\xb9\xd7\x06\x22\xf6\xe4\xcc\xc8\x74\xbf\x96\xa4\xe7\xda\x31\x39\xaa\x5b\x32\xd0\xa9\xae\x0b\xba\x1b\x78\x74\xe6\xa1\x18\xb0\xf0\xd2\xaf\x51\x79\x15\xe8\x4f\x7f\xe0\xf8\x0b\xba\x44\x8d\x33\x36\x2b\x2a\x7b\xdb\xe0\xc8\x5e\x62\xc9\x5e\x0c\x24\x0a\xce\x4c\xa9\x01\xdd\xac\xc9\x19\xee\xb1\x25\xfb\x50\xcc\xb5\xd3\xad\x16\x13\x3e\x5f\x5a\xdb\x48\xd4\x5c\xb6\x22\x6d\x20\x5c\x73\x2e\xbd\xf4\xd6\xe7\xfc\xbe\xc1\x9e\xc3\xc6\x7d\x97\x95\xa8\x5c\xbe\x5d\x2e\x2f\xde\x2c\x97\x8b\x1d\x6d\x91\x75\x13\x28\x77\x44\xba\x98\x99\x0b\xa5\x07\x9d\x6c\x8b\xd3\x83\x9f\xa5\x4d\x73\xee\x71\x5f\x51\x29\x31\x86\x57\x5f\xbc\xc4\xfc\xf4\x70\x07\xdc\x5f\xdf\xcc\x2c\x2d\x7d\x3e\xe3\xad\xec\x61\x53\xaa\x95\xd4\x9b\x67\x2d\x6b\x1e\xc1\x07\xcc\xd9\x99\xe9\x93\x21\x47\x4a\x10\xa4\x95\x41\xcd\x41\x76\x2c\xed\x29\x67\x6c\x09\x9e\x62\xd1\x0c\x21\xcc\xbb\x72\x64\x9a\xae\xed\x16\xb8\x01\xba\x83\x92\x52\x92\x04\x26\xca\x2d\x7a\x4f\x39\xdf\xee\x0a\x06\x1e\x1f\x5f\x98\x6e\x64\x80\x5a\x20\x8a\x42\x87\x23\xc1\x9a\x52\xcf\x39\xb3\x44\x50\x01\x9f\x08\x95\x00\x23\xa0\xf7\x32\x44\x2d\x4f\x51\x29\x64\x3a\x42\x0b\x0e\xda\x9d\xc1\xfe\x24\xc0\x44\x30\x44\x5c\x05\x9a\x48\x93\x9e\xa2\xb2\x9f\x78\x1b\x19\xfe\x15\xc4\x51\x29\x45\x0c\x67\x58\x1f\x22\xec\x55\x30\xbb\x3a\xcc\x20\xde\x0f\x29\x51\x5d\xc2\x75\x20\xcc\x04\x9a\x36\x80\x2d\x72\x84\x30\xed\xca\xa9\x01\x26\xfe\x09\xc0\x76\xbb\x1f\xe7\xf4\x21\xc5\xfa\xe8\xa0\xb2\x35\x8f\xcf\xb6\xe3\x90\x56\x76\x5e\x9c\xca\xce\x3f\xa0\xdf\x01\x00\x00\xff\xff\x34\x79\x20\x12\x98\x04\x00\x00")

func filesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesErrorHtml,
		"files/error.html",
	)
}

func filesErrorHtml() (*asset, error) {
	bytes, err := filesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/error.html", size: 1176, mode: os.FileMode(420), modTime: time.Unix(1509717508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x6e\xdb\x30\x0c\xc6\xef\x7d\x0a\x55\x97\x1c\x56\x59\x29\xd6\x43\x51\x58\x19\x86\x2d\x03\x76\x28\x3a\xa4\xc5\x80\x9d\x0a\x46\x66\x6c\xa6\xb2\xe4\x49\x74\xfe\xa0\xeb\xbb\x0f\x8e\x1b\xa4\x4d\x9b\x6e\x87\xcd\x17\x99\x94\xbe\xef\x47\xca\x84\xf3\xe3\xcf\x57\x9f\x6e\x7e\x7c\x1b\x8b\x8a\x6b\x37\x3a\xca\xbb\x45\xf8\x52\x41\xd3\x18\x09\x4d\x23\x85\x03\x5f\x1a\x89\x5e\x8e\x8e\x84\x10\x22\xaf\x10\x8a\xfe\x75\x13\x32\xb1\xc3\x51\xae\xfb\x75\x97\x9f\x42\x42\x51\x45\x9c\x19\xa9\xe5\x93\x7c\x8d\x0c\xc2\x56\x10\x13\xb2\x91\x2d\xcf\xd4\xb9\x14\xfa\xc5\x81\xe0\x19\x3d\x1b\xb9\xa4\x82\x2b\x53\xe0\x82\x2c\xaa\x4d\x70\x22\xc8\x13\x13\x38\x95\x2c\x38\x34\xa7\x52\x78\xa8\xd1\xc8\x05\xe1\xb2\x09\x91\xdf\xb2\x23\x34\x58\x94\x28\x45\xc5\xdc\x28\xfc\xd9\xd2\xc2\xc8\x95\x6a\x41\xd9\x50\x37\xc0\x34\x75\xf8\x5c\xef\xc8\xdf\x6d\xfb\x48\x0c\x4c\x56\xcf\x60\x41\x36\xf8\x8c\x6c\x90\x22\xa2\x33\xb2\x0b\xa5\xe0\x75\x83\x46\x52\x0d\x25\xea\x95\xea\x73\xaf\x5b\x0d\x3a\x7c\xba\xd0\x7a\x16\x3c\xa7\xac\x0c\xa1\x74\x08\x0d\xa5\xcc\x86\x5a\xdb\x94\x3e\xcc\xa0\x26\xb7\x36\x93\x30\x0d\x1c\x2e\xce\x86\xc3\x93\xf7\xc3\xe1\x60\x43\x1b\x24\x5e\x3b\x4c\x15\x22\x0f\x7a\xe6\x80\x71\xc5\x9d\x6c\xf0\x7a\xe1\x6f\xd2\xba\x3a\xb7\xb8\x4b\x60\x8c\x04\xee\xdd\x57\x1b\x7c\x7a\x6c\x6e\x87\xfb\xe3\xcd\xf4\x47\x33\x9b\x0e\x68\xfb\x09\xd2\xbb\x11\xca\xa7\xa1\x58\x3f\xf1\x2c\x68\x21\xa8\x30\x32\x86\xc0\x72\x94\xeb\x82\x16\x7b\xbb\xbe\x54\xdd\x87\x7e\xb1\x97\x6c\xa4\x86\x77\x89\xee\x59\x92\x2f\xc2\x32\xbb\xbe\xf9\x78\x33\xbe\xfd\x32\xb9\xba\xbc\xbd\x1e\x4f\xbe\x8f\x27\xe6\xfe\x5e\x64\xe2\x97\x98\xa7\xe0\xc5\xc3\xc3\xce\x44\x6f\x5d\xf6\x7d\x45\x8a\xd6\x48\xad\x6d\xe1\xe7\x29\xb3\x2e\xb4\xc5\xcc\x41\xc4\xcd\x0d\xc2\x1c\x56\xda\xd1\x34\x69\xf0\x65\xeb\x20\x66\xf3\xa4\x4f\xb3\xb3\xec\xfc\x49\xa2\xeb\x66\xbf\xc6\x7f\x63\xae\x62\x68\x19\xff\x33\x02\x53\x68\xa3\x3d\x48\x39\x56\x6a\x0f\xb5\x9d\x88\x4d\xee\xb9\x4c\x28\x75\xa8\xc0\x47\xd5\x16\xcb\xa1\x2c\x1d\xaa\xb4\x24\xb6\x55\x56\x93\xff\xab\x2e\x1f\x4d\x6c\x85\xf6\x2e\x85\x96\x5f\x11\xe5\xba\x1f\xbc\x5c\xf7\xff\xbd\xdf\x01\x00\x00\xff\xff\xb3\xa5\xa8\x12\x08\x05\x00\x00")

func filesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesIndexHtml,
		"files/index.html",
	)
}

func filesIndexHtml() (*asset, error) {
	bytes, err := filesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/index.html", size: 1288, mode: os.FileMode(420), modTime: time.Unix(1509731249, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesLogoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x31\x93\xd3\x4c\x0c\xed\xef\x57\xe8\x53\xe3\xe2\x3b\x67\xc3\x40\xc1\xdc\x78\x43\x01\x14\x14\x0c\x0c\x43\x73\xa5\xb2\x96\x6d\x0d\xeb\x5d\x63\xc9\x4e\xf2\xef\x19\xc7\x77\x93\x00\x37\xa1\x92\x9f\x2c\xbd\xf7\xb4\xab\xad\xfe\xfb\xf0\xe5\xfd\xf7\xc7\xaf\x1f\xa1\xb3\x3e\xee\xee\xaa\x25\x40\x6a\x4b\x1a\x06\x8f\x34\x0c\x08\x91\x52\xeb\x91\x13\xee\xee\x00\x00\xaa\x8e\xa9\x5e\x3f\xcf\xd0\xc4\x22\xef\x2a\xb7\xc6\x4b\x7e\x4f\xca\xd0\x8d\xdc\x78\x74\x78\x95\xef\xd9\x08\x42\x47\xa3\xb2\x79\x9c\xac\x29\xdf\x22\xb8\xbf\x0a\x72\x32\x4e\xe6\xf1\x20\xb5\x75\xbe\xe6\x59\x02\x97\x67\x70\x0f\x92\xc4\x84\x62\xa9\x81\x22\xfb\x57\x08\x89\x7a\xf6\x38\x0b\x1f\x86\x3c\xda\x2d\x3a\x61\xcf\x75\xcb\x08\x9d\xd9\x50\xf2\xcf\x49\x66\x8f\xc7\x72\xa2\x32\xe4\x7e\x20\x93\x7d\xe4\xdf\xfb\xa3\xa4\x1f\xcf\x73\xa8\x91\x49\x70\x0d\xcd\x12\x72\xda\x48\xc8\x08\x23\x47\x8f\x0b\x44\xb0\xd3\xc0\x1e\xa5\xa7\x96\xdd\xb1\x5c\x73\x2f\x53\x15\x8b\xbc\x3e\x38\xd7\xe4\x64\xba\x69\x73\x6e\x23\xd3\x20\xba\x09\xb9\x77\x41\xf5\x5d\x43\xbd\xc4\x93\xff\x96\xf7\xd9\xf2\xc3\x9b\xed\xf6\xfe\xf5\x76\x5b\x9c\xd5\x0a\xb5\x53\x64\xed\x98\xad\x58\x35\x0b\xe3\xa3\x2d\x6d\xc5\xcb\xc6\x6f\xaa\x2d\x3e\x9f\xe5\x3e\x93\xf1\x28\x14\xff\xff\x14\x72\xd2\xa7\xe1\x2e\x72\xff\x3c\x99\xb5\x74\x13\xf4\x46\x6f\xe5\x2e\x1b\x54\xed\x73\x7d\xba\xa2\xac\x65\x86\x10\x49\xd5\xe3\x72\x65\x24\x89\x47\x88\xb9\xcd\x93\x5d\xed\xd0\x9f\xa5\x3d\xab\x52\xcb\xf0\x14\xcb\x66\x8a\x71\xdd\x15\xdc\x3d\xe6\x09\x0e\x3c\x32\xe8\x14\x02\xab\x2e\xff\x4e\x0b\x65\xcb\x35\xe4\xc9\x2a\x57\xcb\x7c\xe5\xe0\x02\x2b\xb7\x9a\xab\xdc\xfa\x34\x7e\x05\x00\x00\xff\xff\x16\x92\xe2\x06\x2b\x03\x00\x00")

func filesLogoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesLogoutHtml,
		"files/logout.html",
	)
}

func filesLogoutHtml() (*asset, error) {
	bytes, err := filesLogoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/logout.html", size: 811, mode: os.FileMode(420), modTime: time.Unix(1509717368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/brand.html":  filesBrandHtml,
	"files/error.html":  filesErrorHtml,
	"files/index.html":  filesIndexHtml,
	"files/logout.html": filesLogoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"brand.html":  &bintree{filesBrandHtml, map[string]*bintree{}},
		"error.html":  &bintree{filesErrorHtml, map[string]*bintree{}},
		"index.html":  &bintree{filesIndexHtml, map[string]*bintree{}},
		"logout.html": &bintree{filesLogoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
